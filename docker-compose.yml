services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: jeju-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-test}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-test}
      POSTGRES_DB: ${POSTGRES_DB:-asklocal_dev}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - jeju-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-test}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: jeju-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - jeju-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes

  # API Server
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: jeju-api
    restart: unless-stopped
    ports:
      - "4000:4000"
    env_file:
      - .env.docker
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-test}:${POSTGRES_PASSWORD:-test}@postgres:5432/${POSTGRES_DB:-asklocal_dev}?schema=public
      REDIS_URL: redis://redis:6379
      NODE_ENV: production
      PORT: 4000
    volumes:
      - uploads:/app/apps/api/uploads
    networks:
      - jeju-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:4000/health"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 90s

  # Web Application
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: jeju-web
    restart: unless-stopped
    ports:
      - "3000:3000"
    env_file:
      - .env.docker
    environment:
      NEXT_PUBLIC_API_URL: http://api:4000/api
      NEXT_PUBLIC_SOCKET_URL: http://api:4000
      API_BASE_URL: http://api:4000
      NODE_ENV: production
      PORT: 3000
    networks:
      - jeju-network
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prisma Studio (Optional - can be run locally for better performance)
  prisma-studio:
    image: node:20-alpine
    container_name: jeju-prisma-studio
    restart: unless-stopped
    ports:
      - "5555:5555"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-test}:${POSTGRES_PASSWORD:-test}@postgres:5432/${POSTGRES_DB:-asklocal_dev}?schema=public
    volumes:
      - ./packages/database:/app
    working_dir: /app
    networks:
      - jeju-network
    depends_on:
      postgres:
        condition: service_healthy
    command: sh -c "npm install -g prisma && prisma studio --port 5555 --hostname 0.0.0.0"

networks:
  jeju-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads:
    driver: local
