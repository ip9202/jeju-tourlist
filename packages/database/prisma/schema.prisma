generator client {
  provider      = "prisma-client-js"
  output        = "../../../node_modules/.prisma/client"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  password          String?            // 이메일 로그인용 해시된 비밀번호
  name              String
  nickname          String             @unique
  avatar            String?
  provider          String
  providerId        String?            // OAuth 제공자 ID (이메일 로그인 시 null 허용)
  bio               String?
  location          String?
  website           String?
  isActive          Boolean            @default(true)
  isVerified        Boolean            @default(false)
  lastLoginAt       DateTime?
  points            Int                @default(0)
  level             Int                @default(1)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  adoptedAnswers    Int                @default(0)
  adoptRate         Float              @default(0)
  totalAnswers      Int                @default(0)
  answerCommentLikes AnswerCommentLike[]
  answerComments     AnswerComment[]
  answerLikes        AnswerLike[]
  answers            Answer[]
  bookmarks          Bookmark[]
  notifications      Notification[]
  pointTransactions  PointTransaction[]
  questionLikes      QuestionLike[]
  questions          Question[]
  reports            Report[]
  userBadges         UserBadge[]
  userProfile        UserProfile?
  auditLogs          AuditLog[]
  deletionRequest    DeletionRequest?
  isDeletionRequested Boolean       @default(false)
  deletionRequestedAt DateTime?
  willBeDeletedAt      DateTime?

  @@index([email])
  @@index([provider, providerId])
  @@index([isActive])
  @@index([points])
  @@map("users")
}

model UserProfile {
  id                 String    @id @default(cuid())
  userId             String    @unique
  birthDate          DateTime?
  gender             String?
  phone              String?
  isJejuResident     Boolean   @default(false)
  jejuDistrict       String?
  interests          String[]
  emailNotifications Boolean   @default(true)
  pushNotifications  Boolean   @default(true)
  marketingEmails    Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Question {
  id               String         @id @default(cuid())
  title            String
  content          String
  authorId         String
  categoryId       String?
  tags             String[]
  attachments      String[]      @default([])
  location         String?
  latitude         Float?
  longitude        Float?
  status           QuestionStatus @default(ACTIVE)
  isResolved       Boolean        @default(false)
  isPinned         Boolean        @default(false)
  viewCount        Int            @default(0)
  likeCount        Int            @default(0)
  answerCount      Int            @default(0)
  acceptedAnswerId String?        @unique
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  resolvedAt       DateTime?
  answers          Answer[]
  acceptedAnswer   Answer?        @relation("AcceptedAnswer", fields: [acceptedAnswerId], references: [id])
  bookmarks        Bookmark[]
  likes            QuestionLike[]
  author           User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category         Category?      @relation(fields: [categoryId], references: [id])
  reports          Report[]       @relation("ReportQuestion")

  @@index([authorId])
  @@index([categoryId])
  @@index([status])
  @@index([isResolved])
  @@index([isPinned])
  @@index([createdAt])
  @@index([viewCount])
  @@index([likeCount])
  @@map("questions")
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  color       String?
  icon        String?
  order       Int        @default(0)
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  questions   Question[]

  @@index([isActive])
  @@index([order])
  @@map("categories")
}

model Answer {
  id           String       @id @default(cuid())
  content      String
  authorId     String
  questionId   String
  status       AnswerStatus @default(ACTIVE)
  isAccepted   Boolean      @default(false)
  likeCount    Int          @default(0)
  dislikeCount Int          @default(0)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  acceptedAt   DateTime?
  adoptedAt    DateTime?
  expertPoints Int          @default(0)
  likes        AnswerLike[]
  comments     AnswerComment[]
  author       User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  question     Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  acceptedBy   Question?    @relation("AcceptedAnswer")
  reports      Report[]     @relation("ReportAnswer")

  @@index([authorId])
  @@index([questionId])
  @@index([status])
  @@index([isAccepted])
  @@index([createdAt])
  @@index([likeCount])
  @@map("answers")
}

model AnswerComment {
  id        String            @id @default(cuid())
  content   String
  authorId  String
  answerId  String
  parentId  String?           // 계층형 댓글을 위한 부모 댓글 ID
  depth     Int               @default(0) // 댓글 깊이
  status    AnswerCommentStatus @default(ACTIVE)
  likeCount Int               @default(0)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  
  // 관계
  author    User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  answer    Answer            @relation(fields: [answerId], references: [id], onDelete: Cascade)
  parent    AnswerComment?    @relation("CommentHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children  AnswerComment[]   @relation("CommentHierarchy")
  likes     AnswerCommentLike[]
  
  @@index([authorId])
  @@index([answerId])
  @@index([parentId])
  @@index([status])
  @@index([createdAt])
  @@map("answer_comments")
}

model AnswerCommentLike {
  id        String        @id @default(cuid())
  userId    String
  commentId String
  isLike    Boolean
  createdAt DateTime      @default(now())
  comment   AnswerComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, commentId])
  @@map("answer_comment_likes")
}

model QuestionLike {
  id         String   @id @default(cuid())
  userId     String
  questionId String
  createdAt  DateTime @default(now())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId])
  @@map("question_likes")
}

model AnswerLike {
  id        String   @id @default(cuid())
  userId    String
  answerId  String
  isLike    Boolean
  createdAt DateTime @default(now())
  answer    Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, answerId])
  @@map("answer_likes")
}

model Bookmark {
  id         String   @id @default(cuid())
  userId     String
  questionId String
  createdAt  DateTime @default(now())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId])
  @@map("bookmarks")
}

model Report {
  id          String           @id @default(cuid())
  reporterId  String
  targetType  ReportTargetType
  targetId    String
  reason      String
  description String?
  status      ReportStatus     @default(PENDING)
  adminId     String?
  adminNote   String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  resolvedAt  DateTime?

  // 관계 (polymorphic)
  question      Question?      @relation("ReportQuestion", fields: [targetId], references: [id], onDelete: Cascade, map: "reports_question_fkey")
  answer        Answer?        @relation("ReportAnswer", fields: [targetId], references: [id], onDelete: Cascade, map: "reports_answer_fkey")
  reporter      User           @relation(fields: [reporterId], references: [id], onDelete: Cascade)

  @@index([targetType, targetId])
  @@index([status])
  @@index([createdAt])
  @@map("reports")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  readAt    DateTime?
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

model Badge {
  id                 String      @id @default(cuid())
  code               String      @unique
  name               String
  emoji              String
  description        String
  type               BadgeType
  category           String?
  requiredAnswers    Int
  requiredAdoptRate  Float?
  bonusPoints        Int
  adoptBonusPoints   Int?
  requiresGpsAuth    Boolean     @default(false)
  requiresSocialAuth Boolean     @default(false)
  requiresDocAuth    Boolean     @default(false)
  isActive           Boolean     @default(true)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  userBadges         UserBadge[]

  @@index([type])
  @@index([category])
  @@index([isActive])
  @@map("badges")
}

model UserBadge {
  id       String   @id @default(cuid())
  userId   String
  badgeId  String
  earnedAt DateTime @default(now())
  notified Boolean  @default(false)
  badge    Badge    @relation(fields: [badgeId], references: [id])
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@index([userId])
  @@map("user_badges")
}

model PointTransaction {
  id          String               @id @default(cuid())
  userId      String
  amount      Int
  balance     Int
  type        PointTransactionType
  relatedType String?
  relatedId   String?
  description String
  metadata    Json?
  createdAt   DateTime             @default(now())
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@index([relatedType, relatedId])
  @@map("point_transactions")
}

enum QuestionStatus {
  ACTIVE
  CLOSED
  DELETED
  HIDDEN
}

enum AnswerStatus {
  ACTIVE
  DELETED
  HIDDEN
}

enum AnswerCommentStatus {
  ACTIVE
  DELETED
  HIDDEN
}

enum ReportTargetType {
  QUESTION
  ANSWER
  USER
}

enum ReportStatus {
  PENDING
  APPROVED
  REJECTED
  RESOLVED
}

enum NotificationType {
  QUESTION_ANSWERED
  ANSWER_LIKED
  ANSWER_ACCEPTED
  QUESTION_BOOKMARKED
  BADGE_EARNED
  SYSTEM_ANNOUNCEMENT
  BADGE_PROGRESS
}

enum PointTransactionType {
  QUESTION_CREATED
  ANSWER_CREATED
  ANSWER_ACCEPTED
  QUESTION_LIKED
  ANSWER_LIKED
  BADGE_EARNED
  DAILY_LOGIN
  SYSTEM_REWARD
  SYSTEM_PENALTY
  ADMIN_ADJUSTMENT
  POINT_SPENT
}

enum BadgeType {
  CATEGORY_EXPERT
  ACTIVITY_LEVEL
  LOCATION_BASED
  SOCIAL_VERIFIED
  OFFICIAL_VERIFIED
}

// 이메일 인증 토큰
model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String
  email     String
  token     String   @unique
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  usedAt    DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([email])
  @@index([token])
  @@map("email_verification_tokens")
}

// 비밀번호 재설정 토큰
model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  email     String
  token     String   @unique
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  usedAt    DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([email])
  @@index([token])
  @@map("password_reset_tokens")
}

// Phase 1: 감시 로그 (AuditLog)
// 개인정보 삭제 정책 개선 - 모든 삭제 작업 추적
model AuditLog {
  id        String   @id @default(cuid())
  action    String   // "DELETE", "RESTORE", "PERMANENTLY_DELETE" 등
  targetType String  // "QUESTION", "ANSWER", "COMMENT"
  targetId  String
  userId    String   // 작업을 수행한 사용자
  reason    String?  // 삭제 이유
  status    String   // "DELETED", "RESTORED", "PERMANENTLY_DELETED"
  details   Json?    // 추가 정보 (IP, User-Agent, 기타)
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([action])
  @@index([targetType, targetId])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("audit_logs")
}

// Phase 4: 회원정보 개인정보 삭제
// 사용자 탈퇴 시 30일 유예 기간 후 자동 삭제
model DeletionRequest {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  requestedAt     DateTime @default(now())
  reason          String?
  status          String   // "PENDING", "APPROVED", "COMPLETED", "CANCELLED"
  willBeDeletedAt DateTime // 요청일 + 30일

  requestIp       String?
  requestUserAgent String?

  completedAt     DateTime?
  completedBy     String?  // "admin" 또는 "system"

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([status])
  @@index([userId])
  @@index([willBeDeletedAt])
  @@map("deletion_requests")
}

// Phase 3: 삭제된 데이터 정리 로그
// 자동으로 30일 이상 경과한 DELETED 데이터를 물리적으로 삭제한 기록
model DeleteCleanupLog {
  id                String   @id @default(cuid())
  status            String   // "STARTED", "SUCCESS", "FAILED"
  startedAt         DateTime @default(now())
  completedAt       DateTime?
  deletedComments   Int      @default(0)
  deletedAnswers    Int      @default(0)
  deletedQuestions  Int      @default(0)
  errorMessage      String?
  durationMs        Int?

  @@index([status])
  @@index([startedAt])
  @@index([completedAt])
  @@map("delete_cleanup_logs")
}
