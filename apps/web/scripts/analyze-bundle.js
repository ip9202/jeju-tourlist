#!/usr/bin/env node

/**
 * Î≤àÎì§ ÌÅ¨Í∏∞ Î∂ÑÏÑù Ïä§ÌÅ¨Î¶ΩÌä∏
 * webpack-bundle-analyzerÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Î≤àÎì§ ÌÅ¨Í∏∞Î•º Î∂ÑÏÑù
 * 
 * SOLID ÏõêÏπô Ï†ÅÏö©:
 * - Single Responsibility: Î≤àÎì§ Î∂ÑÏÑù Í∏∞Îä•Îßå Îã¥Îãπ
 * - Open/Closed: ÏÉàÎ°úÏö¥ Î∂ÑÏÑù ÎèÑÍµ¨ Ï∂îÍ∞Ä Í∞ÄÎä•
 * - Liskov Substitution: Îã§ÏñëÌïú Î≤àÎì§Îü¨ÏôÄ Ìò∏Ìôò Í∞ÄÎä•
 * - Interface Segregation: ÌïÑÏöîÌïú Î∂ÑÏÑù Í∏∞Îä•Îßå ÎÖ∏Ï∂ú
 * - Dependency Inversion: Ïô∏Î∂Ä Î∂ÑÏÑù ÎèÑÍµ¨ÏôÄ ÌÜµÌï© Í∞ÄÎä•
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Î∂ÑÏÑù Í≤∞Í≥ºÎ•º Ï†ÄÏû•Ìï† ÎîîÎ†âÌÜ†Î¶¨
const ANALYSIS_DIR = path.join(__dirname, '../analysis');
const BUNDLE_ANALYSIS_FILE = path.join(ANALYSIS_DIR, 'bundle-analysis.json');

/**
 * Î≤àÎì§ Î∂ÑÏÑù Ïã§Ìñâ
 */
function analyzeBundle() {
  console.log('üîç Î≤àÎì§ ÌÅ¨Í∏∞ Î∂ÑÏÑùÏùÑ ÏãúÏûëÌï©ÎãàÎã§...');
  
  try {
    // .next ÎîîÎ†âÌÜ†Î¶¨Í∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏
    const nextDir = path.join(__dirname, '../.next');
    if (!fs.existsSync(nextDir)) {
      console.log('‚ö†Ô∏è  .next ÎîîÎ†âÌÜ†Î¶¨Í∞Ä ÏóÜÏäµÎãàÎã§. Î®ºÏ†Ä ÎπåÎìúÎ•º Ïã§ÌñâÌïòÏÑ∏Ïöî.');
      console.log('   npm run build');
      return;
    }

    // Î∂ÑÏÑù ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
    if (!fs.existsSync(ANALYSIS_DIR)) {
      fs.mkdirSync(ANALYSIS_DIR, { recursive: true });
    }

    // webpack-bundle-analyzer Ïã§Ìñâ
    console.log('üìä webpack-bundle-analyzerÎ•º Ïã§ÌñâÌï©ÎãàÎã§...');
    execSync('npx webpack-bundle-analyzer .next/static/chunks/*.js --mode static --report analysis/bundle-report.html --no-open', {
      cwd: path.join(__dirname, '..'),
      stdio: 'inherit'
    });

    // Î≤àÎì§ ÌÅ¨Í∏∞ Ï†ïÎ≥¥ ÏàòÏßë
    const bundleInfo = collectBundleInfo();
    
    // Í≤∞Í≥ºÎ•º JSON ÌååÏùºÎ°ú Ï†ÄÏû•
    fs.writeFileSync(BUNDLE_ANALYSIS_FILE, JSON.stringify(bundleInfo, null, 2));
    
    console.log('‚úÖ Î≤àÎì§ Î∂ÑÏÑùÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!');
    console.log(`üìÑ Î∂ÑÏÑù Í≤∞Í≥º: ${BUNDLE_ANALYSIS_FILE}`);
    console.log(`üåê HTML Î¶¨Ìè¨Ìä∏: analysis/bundle-report.html`);
    
    // ÌÅ¨Í∏∞ Í≤ΩÍ≥† ÌëúÏãú
    displaySizeWarnings(bundleInfo);
    
  } catch (error) {
    console.error('‚ùå Î≤àÎì§ Î∂ÑÏÑù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§:', error.message);
    process.exit(1);
  }
}

/**
 * Î≤àÎì§ ÌÅ¨Í∏∞ Ï†ïÎ≥¥ ÏàòÏßë
 */
function collectBundleInfo() {
  const chunksDir = path.join(__dirname, '../.next/static/chunks');
  const chunks = fs.readdirSync(chunksDir).filter(file => file.endsWith('.js'));
  
  const bundleInfo = {
    timestamp: new Date().toISOString(),
    chunks: [],
    totalSize: 0,
    recommendations: []
  };

  chunks.forEach(chunk => {
    const chunkPath = path.join(chunksDir, chunk);
    const stats = fs.statSync(chunkPath);
    const sizeKB = Math.round(stats.size / 1024);
    
    bundleInfo.chunks.push({
      name: chunk,
      size: stats.size,
      sizeKB: sizeKB,
      lastModified: stats.mtime
    });
    
    bundleInfo.totalSize += stats.size;
  });

  // ÌÅ¨Í∏∞ÏàúÏúºÎ°ú Ï†ïÎ†¨
  bundleInfo.chunks.sort((a, b) => b.size - a.size);
  
  // Í∂åÏû•ÏÇ¨Ìï≠ ÏÉùÏÑ±
  generateRecommendations(bundleInfo);
  
  return bundleInfo;
}

/**
 * ÌÅ¨Í∏∞ Í∏∞Î∞ò Í∂åÏû•ÏÇ¨Ìï≠ ÏÉùÏÑ±
 */
function generateRecommendations(bundleInfo) {
  const totalSizeMB = bundleInfo.totalSize / (1024 * 1024);
  
  if (totalSizeMB > 1) {
    bundleInfo.recommendations.push({
      type: 'warning',
      message: `Ï†ÑÏ≤¥ Î≤àÎì§ ÌÅ¨Í∏∞Í∞Ä ${totalSizeMB.toFixed(2)}MBÎ°ú ÌÅΩÎãàÎã§. ÏΩîÎìú Î∂ÑÌï†ÏùÑ Í≥†Î†§ÌïòÏÑ∏Ïöî.`
    });
  }
  
  // ÌÅ∞ Ï≤≠ÌÅ¨ ÏãùÎ≥Ñ
  const largeChunks = bundleInfo.chunks.filter(chunk => chunk.sizeKB > 100);
  if (largeChunks.length > 0) {
    bundleInfo.recommendations.push({
      type: 'info',
      message: `ÌÅ∞ Ï≤≠ÌÅ¨Í∞Ä ${largeChunks.length}Í∞ú ÏûàÏäµÎãàÎã§: ${largeChunks.map(c => c.name).join(', ')}`
    });
  }
  
  // ÎèôÏ†Å import Í∂åÏû•
  bundleInfo.recommendations.push({
    type: 'suggestion',
    message: 'ÏÑ±Îä• Ìñ•ÏÉÅÏùÑ ÏúÑÌï¥ React.lazy()ÏôÄ ÎèôÏ†Å importÎ•º ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî.'
  });
  
  // Tree shaking Í∂åÏû•
  bundleInfo.recommendations.push({
    type: 'suggestion',
    message: 'ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÎäî ÏΩîÎìúÎ•º Ï†úÍ±∞ÌïòÍ∏∞ ÏúÑÌï¥ Tree shakingÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî.'
  });
}

/**
 * ÌÅ¨Í∏∞ Í≤ΩÍ≥† ÌëúÏãú
 */
function displaySizeWarnings(bundleInfo) {
  const totalSizeMB = bundleInfo.totalSize / (1024 * 1024);
  
  console.log('\nüìà Î≤àÎì§ ÌÅ¨Í∏∞ ÏöîÏïΩ:');
  console.log(`   Ï†ÑÏ≤¥ ÌÅ¨Í∏∞: ${totalSizeMB.toFixed(2)}MB`);
  console.log(`   Ï≤≠ÌÅ¨ Ïàò: ${bundleInfo.chunks.length}Í∞ú`);
  
  if (bundleInfo.recommendations.length > 0) {
    console.log('\nüí° Í∂åÏû•ÏÇ¨Ìï≠:');
    bundleInfo.recommendations.forEach(rec => {
      const icon = rec.type === 'warning' ? '‚ö†Ô∏è' : rec.type === 'info' ? '‚ÑπÔ∏è' : 'üí°';
      console.log(`   ${icon} ${rec.message}`);
    });
  }
  
  // ÌÅ∞ Ï≤≠ÌÅ¨ ÏÉÅÏúÑ 5Í∞ú ÌëúÏãú
  console.log('\nüîù ÌÅ∞ Ï≤≠ÌÅ¨ Top 5:');
  bundleInfo.chunks.slice(0, 5).forEach((chunk, index) => {
    console.log(`   ${index + 1}. ${chunk.name}: ${chunk.sizeKB}KB`);
  });
}

/**
 * Î©îÏù∏ Ïã§Ìñâ
 */
if (require.main === module) {
  analyzeBundle();
}

module.exports = { analyzeBundle, collectBundleInfo };
